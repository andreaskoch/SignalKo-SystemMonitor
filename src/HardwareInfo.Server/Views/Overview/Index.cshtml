@model dynamic

@{
    ViewBag.Title = "title";
}

<h2>title</h2>

<style type="text/css">
    table {
        width: 700px;
    }

    body {
        font-family: "Segoe UI", Arial, sans-serif;
        font-size: 12px;
    }

    .highCpu {
        background: red;
        color: white;
    }
</style>

<div id="computerInfo">

    <h2>My Computer Info</h2>

    <table border="0">
        <tr>
            <th>Machine</th>
            <th>CPU %</th>
            <th>Memory Available (Mb)</th>
            <th>Total Memory (Mb)</th>
            <th>Mem Available %</th>
        </tr>

        <!-- ko foreach: machines -->
        <tr>
            <td data-bind="text: machineName"></td>
            <td data-bind="text: cpu"></td>
            <td data-bind="text: memUsage"></td>
            <td data-bind="text: memTotal"></td>
            <td data-bind="text: memPercent"></td>
        </tr>
        <!-- /ko -->

    </table>
    
    <section id="livechart"></section>

</div>

@section CustomScripts {
 <script type="text/javascript" src="http://code.highcharts.com/highcharts.js"></script>
<script type="text/javascript">

    var createRingBuffer = function (length) {

        var pointer = 0, buffer = [];

        return {
            get: function (key) { return buffer[key]; },
            push: function (item) {
                buffer[pointer] = item;
                pointer = (length + pointer + 1) % length;
            }
        };
    };
    
    function HardwareInfoViewModel() {
        var self = this;
        self.maxValues = 15;
        self.machines = ko.observableArray([]);
        self.cpuUsage = ko.observableArray([]);
        
        // Get a reference to our hub
        self.hub = $.connection.hardwareStatus;

        new Highcharts.Chart({
            chart: {
                renderTo: 'livechart',
                type: 'line',
                marginRight: 130,
                marginBottom: 25,
                events: {
                    load: function () {
                        var series = this.series[0];
                        setInterval(function () {
                            var x = (new Date()).getTime(), // current time
                                y = Math.random();
                            series.addPoint([x, y], true, true);
                        }, 1000);
                    }
                }                
            },

            title: {
                text: 'Hardware Info',
                x: -20 //center
            },
            xAxis: {
                categories: []
            },

            yAxis: {
                title: {
                    text: 'Counter'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'top',
                x: -10,
                y: 100,
                borderWidth: 0
            },
            series: [{
                name: 'CPU',
                data: (function () {
                    var data = [], i;

                    for (i = 0; i < self.maxValues; i++) {
                        data.push({
                            x: i,
                            y: 0
                        });
                    }
                    
                    return data;
                })()
            }]
        });

        $.extend(self.hub, {
            displayHardwareInfo: function (hardwareInfo) {

                var machine = {
                    machineName: hardwareInfo.MachineName,
                    cpu: hardwareInfo.Processor.toFixed(0),
                    memUsage: (hardwareInfo.MemUsage / 1024).toFixed(2),
                    memTotal: (hardwareInfo.TotalMemory / 1024).toFixed(2),
                    memPercent: ((hardwareInfo.MemUsage / hardwareInfo.TotalMemory) * 100).toFixed(1) + "%"
                };

                if (self.machines().length <= self.maxValues) {
                    self.cpuUsage.push(machine.cpu);
                    self.machines.push(machine);
                } else {
                    self.cpuUsage.shift(machine.cpu);
                    self.machines.shift(machine);
                }
            }
        });

        // Start the connectio
        $.connection.hub.start();
    }

    ko.applyBindings(new HardwareInfoViewModel());

</script>
    
}

