@model dynamic
@{
	ViewBag.Title = "Monitoring";
}
<section>

</section>

@section CustomScripts {
	<script src="http://code.highcharts.com/highcharts.js" type="text/javascript"></script>
	<script src="../../Scripts/systemmonitor.overview.highcharts.theme.darkblue.js" type="text/javascript"></script>
	<script src="../../Scripts/monitoring-config.js" type="text/javascript"></script>
	<script type="text/javascript">
		$.ajaxSetup({ cache: false });

		var ConfigurationUrls = {
			LoadConfig: '@Url.Action("LoadConfig")'
		};

		var GroupOverViewModel = function () {
			var self = this;
			self.machineGroups = ko.observableArray([]);

			// iterate over the Groups
			self.iterateAutomatic = function () {
				if (!self.autoInterval()) {
					self.refreshIntervalId = setInterval(cycle, 6000);
					self.autoInterval(true);
				} else {
					clearInterval(self.refreshIntervalId);
					self.autoInterval(false);
					self.refreshIntervalId = 0;
				}
			};

			self.selectedGroupIndex = 0;
			self.refreshIntervalId = 0;
			self.autoInterval = ko.observable(false);

			self.findMachine = function (name) {
				var machineGroups = self.machineGroups();
				for (var i = 0; i < machineGroups.length; i++) {
					var machineStateGroup = machineGroups[i];
					var machine = machineStateGroup.GetMachine(name);
					if (machine !== null) {
						return machine;
					}
				}
				return null;
			};

			self.addData = function (systemStatus) {
				var machineGroups = self.machineGroups();
				var searchedMachine = null;
				var searchedMachineGroup = null;
				for (var i = 0; i < machineGroups.length; i++) {
					var machineStateGroup = machineGroups[i];
					var machine = machineStateGroup.GetMachine(systemStatus.MachineName);
					if (machine !== null) {
						searchedMachine = machine;
						searchedMachineGroup = machineStateGroup;
						break;
					}
				}

				if (searchedMachine) {
					searchedMachine.addData(systemStatus.Timestamp, systemStatus.DataPoints);
					searchedMachineGroup.SetMedian();
				}
			};

		};

		var GroupOverViewMachineGroup = function (groupName) {
			var self = this;
			self.groupName = ko.observable(groupName);
			self.monitorMachines = ko.observableArray([]);
			self.GroupMedianStatus = ko.observable(0);

			self.GroupMedianStatusView = ko.computed(function () {
				if (self.GroupMedianStatus() > 75) {
					return "Error";
				}
				if (self.GroupMedianStatus() > 65) {
					return "Warn";
				}
				return "";
			});

			self.AddMachine = function (newMachine) {
				self.monitorMachines.push(newMachine);
			};

			self.GetMachine = function (machineName) {
				var match = ko.utils.arrayFirst(self.monitorMachines(), function (item) {
					return item.machineName == machineName;
				});
				return match;
			};

			self.SetMedian = function () {
				var median = 0;
				for (var i = 0; i < self.monitorMachines().length; i++) {
					var current = self.monitorMachines()[i].MedianStatus();
					if (current > median) {
						median = current;
					}
				}
				this.GroupMedianStatus(parseFloat(median).toFixed(2));
			};

		};

		var GroupOverViewMachine = function (name) {
			var self = this;
			self.machineName = name;
			self.isWebserver = ko.observable(true);
			self.monitorAgentEnabled = ko.observable(false);
			self.ChartContainerId = ko.computed(function () {
				return "chart-" + this.machineName;
			}, this);

			self.ChartSizeMax = 120;
			self.StartDateAndTime = null;
			self.chart = null;
			self.ChartTitle = name;

			self.MedianStatus = ko.observable(0.0);

			self.MachineMedianStatusView = ko.computed(function () {
				if (self.MedianStatus() > 75) {
					return "Error";
				}
				if (self.MedianStatus() > 65) {
					return "Warn";
				}
				return "";
			});

			self.addData = function (timestamp, dataPoints) {
				if (self.chart === null) {
					initializeChart(new Date(timestamp), dataPoints);
				}

				if (new Date(timestamp) < self.StartDateAndTime) {
					// skip data
					return;
				}

				for (var i = 0; i < dataPoints.length; i++) {
					var dataName = dataPoints[i].Name;
					var value = dataPoints[i].Value;
					var series = getOrAddSeries(dataName);

					var x = (new Date(timestamp)).getTime();
					var y = parseFloat(value);

					var shiftChart = !(series.data.length < self.ChartSizeMax);
					var redrawChart = false;

					series.addPoint([x, y], redrawChart, shiftChart);
				}
				self.MedianStatus(getMedian(self.chart.series));
				self.chart.redraw();
			};

			var getMedian = function (series) {
				var value = 0;
				var ser = [];
				for (var i = 0; i < series.length; i++) {
					var entries = series[i].data;
					for (var j = 0; j < entries.length; j++) {
						ser.push(entries[j].y);
					}
					var currentValue = median(ser);
					if (currentValue > value) {
						value = currentValue;
					}
				}
				return value.toFixed(2);
			};

			var median = function (values) {
				values.sort(function (a, b) { return a - b; });
				var half = Math.floor(values.length / 2);
				if (values.length % 2)
					return values[half];
				else
					return (values[half - 1] + values[half]) / 2.0;
			};

			var getOrAddSeries = function (seriesName) {
				var series = self.chart.series;

				for (var i = 0; i < series.length; i++) {
					var entry = series[i];
					if (entry.name === seriesName) {
						return entry;
					}
				}
				self.chart.addSeries({
					"name": seriesName,
					"data": []
				});
				return null;
			};

			var initializeChart = function (startDateAndTime, initialDataPoints) {
				// save the start time
				self.StartDateAndTime = startDateAndTime;

				var getInitialSeries = function (dataSeries) {
					var initialSeries = [];

					for (var i = 0; i < dataSeries.length; i++) {
						var seriesName = dataSeries[i].Name;
						var value = dataSeries[i].Value;
						var seriesData = [[startDateAndTime.getTime(), value]];

						initialSeries.push({ "name": seriesName, "data": seriesData });
					}

					return initialSeries;
				};

				self.chart = new Highcharts.Chart({
					chart: {
						renderTo: self.ChartContainerId(),
						type: 'line',
						zoomType: 'x'
					},
					title: {
						text: self.ChartTitle,
						x: -20 //center
					},
					xAxis: {
						type: 'datetime'
					},
					yAxis: {
						title: {
							text: 'Utilization in %'
						},
						min: 0,
						max: 100
					},
					legend: {
						layout: 'vertical',
						align: 'left',
						verticalAlign: 'top',
						x: 70,
						y: 40,
						floating: true,

						borderWidth: 1
					},
					plotOptions: {
						line: {
							lineWidth: 2,
							marker: {
								enabled: false,
								states: {
									hover: {
										enabled: false
									}
								}
							},
							shadow: false,
							states: {
								hover: {
									lineWidth: 4
								}
							}
						}
					},
					series: getInitialSeries(initialDataPoints)
				});
			};

		};

		var groupOverViewModel;

		$(function () {
			groupOverViewModel = new GroupOverViewModel();

			var configViewModel = new MachineGroupingModel();
			configViewModel.loadConfigViewModelComplete = function () {
				var groups = configViewModel.machineGroups();
				for (var i = 0; i < groups.length; i++) {
					// create a groupOverViewMachineGroup
					var group = groups[i];
					var overViewGroup = new GroupOverViewMachineGroup(group.groupName());

					var machines = group.monitorMachines();
					for (var j = 0; j < machines.length; j++) {
						var machine = machines[j];
						var overviewMachine = new GroupOverViewMachine(machine.machineName());
						overviewMachine.isWebserver(machine.isWebserver());
						overviewMachine.monitorAgentEnabled(machine.monitorAgentEnabled());
						overViewGroup.AddMachine(overviewMachine);
					}
					groupOverViewModel.machineGroups.push(overViewGroup);
				}


				ko.applyBindings(groupOverViewModel, document.getElementById('monitorBody'));
				$("#tabs").tabs();
			};

			configViewModel.loadConfigViewModel();

			var systemInformationHub = $.connection.systemInformationHub;
			systemInformationHub.displaySystemStatus = function (systemStatus) {
				groupOverViewModel.addData(systemStatus);
			};

			$.connection.hub.start();
		});


		function cycle() {
			// simulate click on current tab
			$('a[href^="#tabs-"]').eq(groupOverViewModel.selectedGroupIndex).click();
			// increment counter   
			groupOverViewModel.selectedGroupIndex++;
			// reset if we're at the last one
			if (groupOverViewModel.selectedGroupIndex == groupOverViewModel.machineGroups().length) {
				groupOverViewModel.selectedGroupIndex = 0;
			}
		}

	</script>
}
