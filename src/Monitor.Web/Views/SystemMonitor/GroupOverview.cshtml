@model dynamic

@{
    ViewBag.Title = "Monitoring";
}

<section class="middleContent" id="monitorBody">
    
    <span class="smallbutton autobutton" data-bind="click: iterateAutomatic, style: { background: autoInterval() ? '#2E52A4' : '#B0CBF1' }">Iterate</span>
    <div id="tabs">
        
        <ul data-bind="foreach: machineGroups">
            <li>
                <a data-bind="attr: { href: '#tabs-' +  groupName() , title: groupName }, text:  groupName "></a>
            </li>
        </ul>

        <div data-bind="foreach: machineGroups">
            
            <div data-bind="foreach: monitorMachines ,attr: { 'id': 'tabs-' +  groupName() }">
                <span data-bind="text: MedianStatus"></span>
                <div class="item" style="margin-top: 30px; width: 800px; height: 400px; border: none; float: left;" data-bind="attr: { 'id': machineName } ">
                    
                    <div style="width: 800px; height: 400px;" data-bind="attr: {id: ChartContainerId}"></div>
                </div>
            </div>

        </div>
    </div>

</section>

@section CustomScripts {

    @*<script src="@Links.Scripts.monitoring_config_js" type="text/javascript"></script>*@
    <script src="http://code.highcharts.com/highcharts.js" type="text/javascript"></script>
    <script src="../../Scripts/systemmonitor.overview.highcharts.theme.darkblue.js" type="text/javascript"></script>
    <script src="../../Scripts/monitoring-config.js" type="text/javascript"></script>
    <script type="text/javascript">
        $.ajaxSetup({ cache: false });

        var ConfigurationUrls = {
            LoadConfig: '@Url.Action("LoadConfig")'
        };

        var GroupOverViewModel = function () {
            var self = this;
            self.machineGroups = ko.observableArray([]);

            // iterate over the Groups
            self.iterateAutomatic = function () {
                if (!self.autoInterval()) {
                    self.refreshIntervalId = setInterval(cycle, 6000);
                    self.autoInterval(true);
                } else {
                    clearInterval(self.refreshIntervalId);
                    self.autoInterval(false);
                    self.refreshIntervalId = 0;
                }
            };

            self.selectedGroupIndex = 0;
            self.refreshIntervalId = 0;
            self.autoInterval = ko.observable(false);

            self.findMachine = function (name) {
                var machineGroups = self.machineGroups();
                for (var i = 0; i < machineGroups.length; i++) {
                    var machineStateGroup = machineGroups[i];
                    var machines = machineStateGroup.monitorMachines();

                    for (var j = 0; j < machines.length; j++) {
                        if (machines[j].machineName === name) {
                            return machines[j];
                        }
                    }
                }
                return null;
            };

        };

        var GroupOverViewMachineGroup = function (groupName) {
            var self = this;
            self.groupName = ko.observable(groupName);
            self.monitorMachines = ko.observableArray([]);
        };

        var GroupOverViewMachine = function (name) {
            var self = this;
            self.machineName = name;
            self.isWebserver = ko.observable(true);
            self.monitorAgentEnabled = ko.observable(false);
            self.ChartContainerId = ko.computed(function () {
                return "chart-" + this.machineName;
            }, this);

            self.ChartSizeMax = 120;
            self.StartDateAndTime = null;
            self.chart = null;
            self.ChartTitle = name;

            self.MedianStatus = ko.observable(0);

            self.AddData = function (timestamp, dataPoints) {
                if (self.chart === null) {
                    initializeChart(new Date(timestamp), dataPoints);
                }

                if (new Date(timestamp) < self.StartDateAndTime) {
                    // skip data
                    return;
                }

                for (var i = 0; i < dataPoints.length; i++) {
                    var dataName = dataPoints[i].Name;
                    var value = dataPoints[i].Value;
                    var series = getOrAddSeries(dataName);

                    var x = (new Date(timestamp)).getTime();
                    var y = parseFloat(value);

                    var shiftChart = !(series.data.length < self.ChartSizeMax);
                    var redrawChart = false;

                    series.addPoint([x, y], redrawChart, shiftChart);
                }
                //self.MedianStatus(getMedian(self.chart.series));
                self.chart.redraw();
            };

            var getMedian = function (series) {
                var value = 0;
                for (var i = 0; i < series.length; i++) {
                    var entries = series[i].data;
                    var currentValue = median(entries);
                    if (currentValue > value) {
                        value = currentValue;
                    }
                }
                return value;
            };

            var median = function (values) {

                values.sort(function (a, b) { return a - b; });

                var half = Math.floor(values.length / 2);

                if (values.length % 2)
                    return values[half];
                else
                    return (values[half - 1] + values[half]) / 2.0;
            };

            var getOrAddSeries = function (seriesName) {
                var series = self.chart.series;

                for (var i = 0; i < series.length; i++) {
                    var entry = series[i];
                    if (entry.name === seriesName) {
                        return entry;
                    }
                }

                self.chart.addSeries({
                    "name": seriesName,
                    "data": []
                });
                return null;

            };

            var initializeChart = function (startDateAndTime, initialDataPoints) {
                // save the start time
                self.StartDateAndTime = startDateAndTime;

                var getInitialSeries = function (dataSeries) {
                    var initialSeries = [];

                    for (var i = 0; i < dataSeries.length; i++) {
                        var seriesName = dataSeries[i].Name;
                        var value = dataSeries[i].Value;
                        var seriesData = [[startDateAndTime.getTime(), value]];

                        initialSeries.push({ "name": seriesName, "data": seriesData });
                    }

                    return initialSeries;
                };

                self.chart = new Highcharts.Chart({
                    chart: {
                        renderTo: self.ChartContainerId(),
                        type: 'line',
                        zoomType: 'x'
                    },
                    title: {
                        text: self.ChartTitle,
                        x: -20 //center
                    },
                    xAxis: {
                        type: 'datetime'
                    },
                    yAxis: {
                        title: {
                            text: 'Utilization in %'
                        },
                        min: 0,
                        max: 100
                    },
                    legend: {
                        layout: 'vertical',
                        align: 'left',
                        verticalAlign: 'top',
                        x: 70,
                        y: 40,
                        floating: true,

                        borderWidth: 1
                    },
                    plotOptions: {
                        line: {
                            lineWidth: 2,
                            marker: {
                                enabled: false,
                                states: {
                                    hover: {
                                        enabled: false
                                    }
                                }
                            },
                            shadow: false,
                            states: {
                                hover: {
                                    lineWidth: 4
                                }
                            }
                        }
                    },
                    series: getInitialSeries(initialDataPoints)
                });
            };

        };
        
        var groupOverViewModel;

        $(function () {
            groupOverViewModel = new GroupOverViewModel();

            var configViewModel = new MachineGroupingModel();
            configViewModel.loadConfigViewModelComplete = function () {
                var groups = configViewModel.machineGroups();
                for (var i = 0; i < groups.length; i++) {
                    // create a groupOverViewMachineGroup
                    var group = groups[i];
                    var overViewGroup = new GroupOverViewMachineGroup(group.groupName());

                    var machines = group.monitorMachines();
                    for (var j = 0; j < machines.length; j++) {
                        var machine = machines[j];
                        var overviewMachine = new GroupOverViewMachine(machine.machineName());
                        overviewMachine.isWebserver(machine.isWebserver());
                        overviewMachine.monitorAgentEnabled(machine.monitorAgentEnabled());
                        overViewGroup.monitorMachines.push(overviewMachine);
                    }
                    groupOverViewModel.machineGroups.push(overViewGroup);
                }

                
                ko.applyBindings(groupOverViewModel, document.getElementById('monitorBody'));
                $("#tabs").tabs();
            };

            configViewModel.loadConfigViewModel();

            var systemInformationHub = $.connection.systemInformationHub;
            systemInformationHub.displaySystemStatus = function (systemStatus) {
                var mach = groupOverViewModel.findMachine(systemStatus.MachineName);
                if (mach !== null) {
                    mach.AddData(systemStatus.Timestamp, systemStatus.DataPoints);
                    
                }
            };

            $.connection.hub.start();
        });


        function cycle() {
            // simulate click on current tab
            $('a[href^="#tabs-"]').eq(groupOverViewModel.selectedGroupIndex).click();
            // increment counter   
            groupOverViewModel.selectedGroupIndex++;
            // reset if we're at the last one
            if (groupOverViewModel.selectedGroupIndex == groupOverViewModel.machineGroups().length) {
                groupOverViewModel.selectedGroupIndex = 0;
            }
        }

    </script>

}